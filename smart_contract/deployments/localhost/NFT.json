{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFT__DontHaveEnoughTokensToMintNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFT__NFTMintingLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFT__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFT__YouDidntProvideApprovalOFTokensForNFTMinting",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NFT.NFTDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d1004bfca0a6f3f199a6f703a997a322da2fc3f5fa56cf43931b347359b21c8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2793850",
    "logsBloom": "0x
    "blockHash": "0x7ecfd3caf75ac883de12a133eb37dd1eef85dab9324826c067b214160be6a07f",
    "transactionHash": "0x8d1004bfca0a6f3f199a6f703a997a322da2fc3f5fa56cf43931b347359b21c8",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2793850",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c98bc4023565252cfeca064e8f18de7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFT__DontHaveEnoughTokensToMintNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFT__NFTMintingLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFT__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFT__YouDidntProvideApprovalOFTokensForNFTMinting\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NFT.NFTDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\ncontract MyToken {\\r\\n    ////////////////State Variables///////////////////////\\r\\n address private  admin;\\r\\n string public constant name = \\\"Shiba-Inu\\\";\\r\\n string public constant symbol = \\\"SI\\\";\\r\\n uint256 public totalSupply = 1000 * 10 ** 10;\\r\\n uint256 public immutable decimals; \\r\\n ////////////////////////////////Events//////////////////////////////\\r\\n\\r\\n    event Transfer(address indexed recipient, address indexed to, uint256 amount);\\r\\n    event Allowance(address indexed from, address indexed to, uint256 amount);\\r\\n    \\r\\n    //////////////////////Mappings///////////////////////\\r\\n\\r\\n    mapping(address=>uint256) private balances;\\r\\n    mapping(address=>mapping(address=>uint256)) private allowed;\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n        balances[msg.sender] = totalSupply;\\r\\n        decimals = 10;\\r\\n    } \\r\\n\\r\\n///////////////////////////Modifier///////////////////\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin,\\\"You are not allowed to do that\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /////////////////////Main Functions///////////////////////////\\r\\n\\r\\n    function transfer(address reciever, uint256 amount) public returns(bool){\\r\\n        require(balances[msg.sender] >= amount,\\\"You dont have enough tokens to transfer\\\");\\r\\n        require(reciever != address(0),\\\"This address does not exist\\\");\\r\\n        balances[msg.sender] -= amount;\\r\\n        balances[reciever] += amount;\\r\\n\\r\\n        emit Transfer(msg.sender,reciever,amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 quantity) public onlyAdmin returns(uint256){\\r\\n        totalSupply += quantity;\\r\\n        balances[msg.sender] += quantity;\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public onlyAdmin returns(uint256) {\\r\\n        require(balances[msg.sender] >= amount,\\\"You have enough tokens to burn\\\");\\r\\n        balances[msg.sender] -= amount;\\r\\n        totalSupply -= amount;\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    function approval(address _spender, uint256 _value) public returns(bool success) {\\r\\n         allowed[msg.sender][_spender] = _value;\\r\\n         \\r\\n         emit Allowance(msg.sender,_spender,_value);\\r\\n         return true;\\r\\n    } \\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\\r\\n        uint256 allowedTokens = allowed[_from][msg.sender];\\r\\n        require(balances[_from] >= _value && allowedTokens>=_value);\\r\\n        balances[_to] += _value;\\r\\n        balances[_from] -= _value;\\r\\n        allowed[_from][msg.sender] -= _value;\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    ////////////////View Functions//////////////////////\\r\\n\\r\\n\\r\\n    \\r\\n    function allowance(address _owner, address _spender) public view returns(uint256){\\r\\n       return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function balanceOf(address user) public view returns(uint256){\\r\\n        return balances[user];\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xc267b08368ff788712423d09b2b44451254d2c8adfb87fed8b17d1aef45dc415\",\"license\":\"GPL-3.0\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./MyToken.sol\\\";\\r\\n\\r\\nerror NFT__DontHaveEnoughTokensToMintNFT();\\r\\nerror NFT__YouDidntProvideApprovalOFTokensForNFTMinting();\\r\\nerror NFT__TransferFailed();\\r\\nerror NFT__NFTMintingLimitReached();\\r\\ncontract NFT is ERC721URIStorage {\\r\\n////////////////////////////////Struct//////////////////////////////////////////\\r\\nstruct NFTDetails {\\r\\n    uint256 tokenid;\\r\\n    address owner;\\r\\n}\\r\\n    ////////////////////////////State Variables//////////////////////////////////\\r\\n    \\r\\n    uint256 private s_tokenCounter;\\r\\n      MyToken private immutable token;\\r\\n      uint256 private constant VALUE = 5000000000;\\r\\n\\r\\n    /////////////////////////mapping////////////////////////////////////\\r\\n    mapping(uint256 => NFTDetails) private details;\\r\\n\\r\\n    //////////////////////////Events////////////////////////////////////\\r\\n    event NFTMinted( address indexed owner, address indexed nftAddress, uint256 indexed tokenId);\\r\\n    constructor(address _token) ERC721(\\\"My NFT\\\", \\\"MN\\\") {\\r\\n        s_tokenCounter = 0;\\r\\n        token = MyToken(_token);\\r\\n    }\\r\\n\\r\\n///////////////////////Main Function////////////////////////////////////\\r\\n\\r\\n    function mintNft(string memory _tokenURI) public returns (uint256) {\\r\\n\\r\\n        if(s_tokenCounter > 2) {\\r\\n            revert NFT__NFTMintingLimitReached();\\r\\n        }\\r\\n    \\r\\n        if(token.balanceOf(msg.sender) < VALUE){\\r\\n            revert NFT__DontHaveEnoughTokensToMintNFT(); \\r\\n        }\\r\\n        if(token.allowance(msg.sender, address(this)) < VALUE) {\\r\\n            revert NFT__YouDidntProvideApprovalOFTokensForNFTMinting();\\r\\n        }\\r\\n   \\r\\n        (bool success) = token.transferFrom(msg.sender, address(this), VALUE);\\r\\n\\r\\n        if(!success) {\\r\\n            revert NFT__TransferFailed();\\r\\n        }\\r\\n\\r\\n        _safeMint(msg.sender, s_tokenCounter);\\r\\n        _setTokenURI(s_tokenCounter, _tokenURI);\\r\\n        details[s_tokenCounter] = NFTDetails(s_tokenCounter,msg.sender);\\r\\n        emit NFTMinted(msg.sender, address(this), s_tokenCounter);\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n///////////////////////Getter Functions////////////////////////////////////\\r\\n\\r\\n function getAllNFTs() public view returns (NFTDetails[] memory) {\\r\\n       \\r\\n        NFTDetails[] memory nfts = new NFTDetails[](s_tokenCounter);\\r\\n\\r\\n        for(uint i=0;i<s_tokenCounter;i++)\\r\\n        {\\r\\n            NFTDetails storage currentItem = details[i];\\r\\n            nfts[i] = currentItem;\\r\\n        }\\r\\n        return nfts;\\r\\n    }\\r\\n\\r\\n    function getTokenCounter() public view returns (uint256) {\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n    function mintingFees() public pure returns(uint256) {\\r\\n        return VALUE;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x8a776f43b5346e205e06a3bcfc460da1cbb55c1604f49d44feeedc94e78a76a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620033c0380380620033c0833981810160405281019062000037919062000237565b6040518060400160405280600681526020017f4d79204e465400000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d4e0000000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200011d565b508060019080519060200190620000d49291906200011d565b50505060006007819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050620002ce565b8280546200012b9062000298565b90600052602060002090601f0160209004810192826200014f57600085556200019b565b82601f106200016a57805160ff19168380011785556200019b565b828001600101855582156200019b579182015b828111156200019a5782518255916020019190600101906200017d565b5b509050620001aa9190620001ae565b5090565b5b80821115620001c9576000816000905550600101620001af565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ff82620001d2565b9050919050565b6200021181620001f2565b81146200021d57600080fd5b50565b600081519050620002318162000206565b92915050565b60006020828403121562000250576200024f620001cd565b5b6000620002608482850162000220565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002b157607f821691505b60208210811415620002c857620002c762000269565b5b50919050565b60805160601c6130c5620002fb60003960008181610ab901528181610ba00152610c8501526130c56000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063b88d4fde11610071578063b88d4fde146102b8578063c87b56dd146102d4578063da86f4a914610304578063e0391b0914610334578063e985e9c5146103525761010b565b806370a08231146102305780638c2fa9ea1461026057806395d89b411461027e578063a22cb4651461029c5761010b565b806323b872dd116100de57806323b872dd146101aa57806342842e0e146101c65780636352211e146101e25780636e02007d146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ea6565b610382565b6040516101379190611eee565b60405180910390f35b610148610464565b6040516101559190611fa2565b60405180910390f35b61017860048036038101906101739190611ffa565b6104f6565b6040516101859190612068565b60405180910390f35b6101a860048036038101906101a391906120af565b61053c565b005b6101c460048036038101906101bf91906120ef565b610654565b005b6101e060048036038101906101db91906120ef565b6106b4565b005b6101fc60048036038101906101f79190611ffa565b6106d4565b6040516102099190612068565b60405180910390f35b61021a610786565b6040516102279190612151565b60405180910390f35b61024a6004803603810190610245919061216c565b610790565b6040516102579190612151565b60405180910390f35b610268610848565b6040516102759190612151565b60405180910390f35b610286610855565b6040516102939190611fa2565b60405180910390f35b6102b660048036038101906102b191906121c5565b6108e7565b005b6102d260048036038101906102cd919061233a565b6108fd565b005b6102ee60048036038101906102e99190611ffa565b61095f565b6040516102fb9190611fa2565b60405180910390f35b61031e6004803603810190610319919061245e565b610a72565b60405161032b9190612151565b60405180910390f35b61033c610e9b565b60405161034991906125a3565b60405180910390f35b61036c600480360381019061036791906125c5565b610fc1565b6040516103799190611eee565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045d575061045c82611055565b5b9050919050565b60606000805461047390612634565b80601f016020809104026020016040519081016040528092919081815260200182805461049f90612634565b80156104ec5780601f106104c1576101008083540402835291602001916104ec565b820191906000526020600020905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b6000610501826110bf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610547826106d4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af906126d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105d761110a565b73ffffffffffffffffffffffffffffffffffffffff16148061060657506106058161060061110a565b610fc1565b5b610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c9061276a565b60405180910390fd5b61064f8383611112565b505050565b61066561065f61110a565b826111cb565b6106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906127fc565b60405180910390fd5b6106af838383611260565b505050565b6106cf838383604051806020016040528060008152506108fd565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490612868565b60405180910390fd5b80915050919050565b6000600754905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f8906128fa565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600064012a05f200905090565b60606001805461086490612634565b80601f016020809104026020016040519081016040528092919081815260200182805461089090612634565b80156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b5050505050905090565b6108f96108f261110a565b83836114c7565b5050565b61090e61090861110a565b836111cb565b61094d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610944906127fc565b60405180910390fd5b61095984848484611634565b50505050565b606061096a826110bf565b600060066000848152602001908152602001600020805461098a90612634565b80601f01602080910402602001604051908101604052809291908181526020018280546109b690612634565b8015610a035780601f106109d857610100808354040283529160200191610a03565b820191906000526020600020905b8154815290600101906020018083116109e657829003601f168201915b505050505090506000610a14611690565b9050600081511415610a2a578192505050610a6d565b600082511115610a5f578082604051602001610a47929190612956565b60405160208183030381529060405292505050610a6d565b610a68846116a7565b925050505b919050565b600060026007541115610ab1576040517fb301b28500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b64012a05f2007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b109190612068565b60206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b60919061298f565b1015610b98576040517fbdd43e9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b64012a05f2007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610bf99291906129bc565b60206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061298f565b1015610c81576040517f37710a6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd333064012a05f2006040518463ffffffff1660e01b8152600401610ce5939291906129e5565b602060405180830381600087803b158015610cff57600080fd5b505af1158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190612a31565b905080610d70576040517fbcc8eeb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d7c3360075461170f565b610d886007548461172d565b604051806040016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152506008600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506007543073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2f7377f0470ca5f5d5bcb55c33ff5e20e0a2653933e0615e99f01e81640d0a9260405160405180910390a46001600754610e8a9190612a8d565b600781905550600754915050919050565b6060600060075467ffffffffffffffff811115610ebb57610eba61220f565b5b604051908082528060200260200182016040528015610ef457816020015b610ee1611d67565b815260200190600190039081610ed95790505b50905060005b600754811015610fb957600060086000838152602001908152602001600020905080604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110610f9a57610f99612ae3565b5b6020026020010181905250508080610fb190612b12565b915050610efa565b508091505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110c8816117a1565b611107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fe90612868565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611185836106d4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111d7836106d4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061121957506112188185610fc1565b5b8061125757508373ffffffffffffffffffffffffffffffffffffffff1661123f846104f6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611280826106d4565b73ffffffffffffffffffffffffffffffffffffffff16146112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd90612bcd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133d90612c5f565b60405180910390fd5b61135183838361180d565b61135c600082611112565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ac9190612c7f565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114039190612a8d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114c2838383611812565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d90612cff565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116279190611eee565b60405180910390a3505050565b61163f848484611260565b61164b84848484611817565b61168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612d91565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606116b2826110bf565b60006116bc611690565b905060008151116116dc5760405180602001604052806000815250611707565b806116e6846119ae565b6040516020016116f7929190612956565b6040516020818303038152906040525b915050919050565b611729828260405180602001604052806000815250611b0f565b5050565b611736826117a1565b611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176c90612e23565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061179c929190611d97565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006118388473ffffffffffffffffffffffffffffffffffffffff16611b6a565b156119a1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261186161110a565b8786866040518563ffffffff1660e01b81526004016118839493929190612e98565b602060405180830381600087803b15801561189d57600080fd5b505af19250505080156118ce57506040513d601f19601f820116820180604052508101906118cb9190612ef9565b60015b611951573d80600081146118fe576040519150601f19603f3d011682016040523d82523d6000602084013e611903565b606091505b50600081511415611949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194090612d91565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119a6565b600190505b949350505050565b606060008214156119f6576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b0a565b600082905060005b60008214611a28578080611a1190612b12565b915050600a82611a219190612f55565b91506119fe565b60008167ffffffffffffffff811115611a4457611a4361220f565b5b6040519080825280601f01601f191660200182016040528015611a765781602001600182028036833780820191505090505b5090505b60008514611b0357600182611a8f9190612c7f565b9150600a85611a9e9190612f86565b6030611aaa9190612a8d565b60f81b818381518110611ac057611abf612ae3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611afc9190612f55565b9450611a7a565b8093505050505b919050565b611b198383611b8d565b611b266000848484611817565b611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90612d91565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf490613003565b60405180910390fd5b611c06816117a1565b15611c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3d9061306f565b60405180910390fd5b611c526000838361180d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca29190612a8d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d6360008383611812565b5050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054611da390612634565b90600052602060002090601f016020900481019282611dc55760008555611e0c565b82601f10611dde57805160ff1916838001178555611e0c565b82800160010185558215611e0c579182015b82811115611e0b578251825591602001919060010190611df0565b5b509050611e199190611e1d565b5090565b5b80821115611e36576000816000905550600101611e1e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e8381611e4e565b8114611e8e57600080fd5b50565b600081359050611ea081611e7a565b92915050565b600060208284031215611ebc57611ebb611e44565b5b6000611eca84828501611e91565b91505092915050565b60008115159050919050565b611ee881611ed3565b82525050565b6000602082019050611f036000830184611edf565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f43578082015181840152602081019050611f28565b83811115611f52576000848401525b50505050565b6000601f19601f8301169050919050565b6000611f7482611f09565b611f7e8185611f14565b9350611f8e818560208601611f25565b611f9781611f58565b840191505092915050565b60006020820190508181036000830152611fbc8184611f69565b905092915050565b6000819050919050565b611fd781611fc4565b8114611fe257600080fd5b50565b600081359050611ff481611fce565b92915050565b6000602082840312156120105761200f611e44565b5b600061201e84828501611fe5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061205282612027565b9050919050565b61206281612047565b82525050565b600060208201905061207d6000830184612059565b92915050565b61208c81612047565b811461209757600080fd5b50565b6000813590506120a981612083565b92915050565b600080604083850312156120c6576120c5611e44565b5b60006120d48582860161209a565b92505060206120e585828601611fe5565b9150509250929050565b60008060006060848603121561210857612107611e44565b5b60006121168682870161209a565b93505060206121278682870161209a565b925050604061213886828701611fe5565b9150509250925092565b61214b81611fc4565b82525050565b60006020820190506121666000830184612142565b92915050565b60006020828403121561218257612181611e44565b5b60006121908482850161209a565b91505092915050565b6121a281611ed3565b81146121ad57600080fd5b50565b6000813590506121bf81612199565b92915050565b600080604083850312156121dc576121db611e44565b5b60006121ea8582860161209a565b92505060206121fb858286016121b0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61224782611f58565b810181811067ffffffffffffffff821117156122665761226561220f565b5b80604052505050565b6000612279611e3a565b9050612285828261223e565b919050565b600067ffffffffffffffff8211156122a5576122a461220f565b5b6122ae82611f58565b9050602081019050919050565b82818337600083830152505050565b60006122dd6122d88461228a565b61226f565b9050828152602081018484840111156122f9576122f861220a565b5b6123048482856122bb565b509392505050565b600082601f83011261232157612320612205565b5b81356123318482602086016122ca565b91505092915050565b6000806000806080858703121561235457612353611e44565b5b60006123628782880161209a565b94505060206123738782880161209a565b935050604061238487828801611fe5565b925050606085013567ffffffffffffffff8111156123a5576123a4611e49565b5b6123b18782880161230c565b91505092959194509250565b600067ffffffffffffffff8211156123d8576123d761220f565b5b6123e182611f58565b9050602081019050919050565b60006124016123fc846123bd565b61226f565b90508281526020810184848401111561241d5761241c61220a565b5b6124288482856122bb565b509392505050565b600082601f83011261244557612444612205565b5b81356124558482602086016123ee565b91505092915050565b60006020828403121561247457612473611e44565b5b600082013567ffffffffffffffff81111561249257612491611e49565b5b61249e84828501612430565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6124dc81611fc4565b82525050565b6124eb81612047565b82525050565b60408201600082015161250760008501826124d3565b50602082015161251a60208501826124e2565b50505050565b600061252c83836124f1565b60408301905092915050565b6000602082019050919050565b6000612550826124a7565b61255a81856124b2565b9350612565836124c3565b8060005b8381101561259657815161257d8882612520565b975061258883612538565b925050600181019050612569565b5085935050505092915050565b600060208201905081810360008301526125bd8184612545565b905092915050565b600080604083850312156125dc576125db611e44565b5b60006125ea8582860161209a565b92505060206125fb8582860161209a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061264c57607f821691505b602082108114156126605761265f612605565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126c2602183611f14565b91506126cd82612666565b604082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612754603e83611f14565b915061275f826126f8565b604082019050919050565b6000602082019050818103600083015261278381612747565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006127e6602e83611f14565b91506127f18261278a565b604082019050919050565b60006020820190508181036000830152612815816127d9565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612852601883611f14565b915061285d8261281c565b602082019050919050565b6000602082019050818103600083015261288181612845565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006128e4602983611f14565b91506128ef82612888565b604082019050919050565b60006020820190508181036000830152612913816128d7565b9050919050565b600081905092915050565b600061293082611f09565b61293a818561291a565b935061294a818560208601611f25565b80840191505092915050565b60006129628285612925565b915061296e8284612925565b91508190509392505050565b60008151905061298981611fce565b92915050565b6000602082840312156129a5576129a4611e44565b5b60006129b38482850161297a565b91505092915050565b60006040820190506129d16000830185612059565b6129de6020830184612059565b9392505050565b60006060820190506129fa6000830186612059565b612a076020830185612059565b612a146040830184612142565b949350505050565b600081519050612a2b81612199565b92915050565b600060208284031215612a4757612a46611e44565b5b6000612a5584828501612a1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a9882611fc4565b9150612aa383611fc4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ad857612ad7612a5e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612b1d82611fc4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b5057612b4f612a5e565b5b600182019050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612bb7602583611f14565b9150612bc282612b5b565b604082019050919050565b60006020820190508181036000830152612be681612baa565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612c49602483611f14565b9150612c5482612bed565b604082019050919050565b60006020820190508181036000830152612c7881612c3c565b9050919050565b6000612c8a82611fc4565b9150612c9583611fc4565b925082821015612ca857612ca7612a5e565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612ce9601983611f14565b9150612cf482612cb3565b602082019050919050565b60006020820190508181036000830152612d1881612cdc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612d7b603283611f14565b9150612d8682612d1f565b604082019050919050565b60006020820190508181036000830152612daa81612d6e565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612e0d602e83611f14565b9150612e1882612db1565b604082019050919050565b60006020820190508181036000830152612e3c81612e00565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612e6a82612e43565b612e748185612e4e565b9350612e84818560208601611f25565b612e8d81611f58565b840191505092915050565b6000608082019050612ead6000830187612059565b612eba6020830186612059565b612ec76040830185612142565b8181036060830152612ed98184612e5f565b905095945050505050565b600081519050612ef381611e7a565b92915050565b600060208284031215612f0f57612f0e611e44565b5b6000612f1d84828501612ee4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f6082611fc4565b9150612f6b83611fc4565b925082612f7b57612f7a612f26565b5b828204905092915050565b6000612f9182611fc4565b9150612f9c83611fc4565b925082612fac57612fab612f26565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612fed602083611f14565b9150612ff882612fb7565b602082019050919050565b6000602082019050818103600083015261301c81612fe0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613059601c83611f14565b915061306482613023565b602082019050919050565b600060208201905081810360008301526130888161304c565b905091905056fea2646970667358221220999a5318a7973e3845a0469110d3c5e17f01d7aabb16c4ccc091602ba87f764b64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063b88d4fde11610071578063b88d4fde146102b8578063c87b56dd146102d4578063da86f4a914610304578063e0391b0914610334578063e985e9c5146103525761010b565b806370a08231146102305780638c2fa9ea1461026057806395d89b411461027e578063a22cb4651461029c5761010b565b806323b872dd116100de57806323b872dd146101aa57806342842e0e146101c65780636352211e146101e25780636e02007d146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ea6565b610382565b6040516101379190611eee565b60405180910390f35b610148610464565b6040516101559190611fa2565b60405180910390f35b61017860048036038101906101739190611ffa565b6104f6565b6040516101859190612068565b60405180910390f35b6101a860048036038101906101a391906120af565b61053c565b005b6101c460048036038101906101bf91906120ef565b610654565b005b6101e060048036038101906101db91906120ef565b6106b4565b005b6101fc60048036038101906101f79190611ffa565b6106d4565b6040516102099190612068565b60405180910390f35b61021a610786565b6040516102279190612151565b60405180910390f35b61024a6004803603810190610245919061216c565b610790565b6040516102579190612151565b60405180910390f35b610268610848565b6040516102759190612151565b60405180910390f35b610286610855565b6040516102939190611fa2565b60405180910390f35b6102b660048036038101906102b191906121c5565b6108e7565b005b6102d260048036038101906102cd919061233a565b6108fd565b005b6102ee60048036038101906102e99190611ffa565b61095f565b6040516102fb9190611fa2565b60405180910390f35b61031e6004803603810190610319919061245e565b610a72565b60405161032b9190612151565b60405180910390f35b61033c610e9b565b60405161034991906125a3565b60405180910390f35b61036c600480360381019061036791906125c5565b610fc1565b6040516103799190611eee565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045d575061045c82611055565b5b9050919050565b60606000805461047390612634565b80601f016020809104026020016040519081016040528092919081815260200182805461049f90612634565b80156104ec5780601f106104c1576101008083540402835291602001916104ec565b820191906000526020600020905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b6000610501826110bf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610547826106d4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af906126d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105d761110a565b73ffffffffffffffffffffffffffffffffffffffff16148061060657506106058161060061110a565b610fc1565b5b610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c9061276a565b60405180910390fd5b61064f8383611112565b505050565b61066561065f61110a565b826111cb565b6106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906127fc565b60405180910390fd5b6106af838383611260565b505050565b6106cf838383604051806020016040528060008152506108fd565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490612868565b60405180910390fd5b80915050919050565b6000600754905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f8906128fa565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600064012a05f200905090565b60606001805461086490612634565b80601f016020809104026020016040519081016040528092919081815260200182805461089090612634565b80156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b5050505050905090565b6108f96108f261110a565b83836114c7565b5050565b61090e61090861110a565b836111cb565b61094d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610944906127fc565b60405180910390fd5b61095984848484611634565b50505050565b606061096a826110bf565b600060066000848152602001908152602001600020805461098a90612634565b80601f01602080910402602001604051908101604052809291908181526020018280546109b690612634565b8015610a035780601f106109d857610100808354040283529160200191610a03565b820191906000526020600020905b8154815290600101906020018083116109e657829003601f168201915b505050505090506000610a14611690565b9050600081511415610a2a578192505050610a6d565b600082511115610a5f578082604051602001610a47929190612956565b60405160208183030381529060405292505050610a6d565b610a68846116a7565b925050505b919050565b600060026007541115610ab1576040517fb301b28500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b64012a05f2007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b109190612068565b60206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b60919061298f565b1015610b98576040517fbdd43e9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b64012a05f2007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610bf99291906129bc565b60206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c49919061298f565b1015610c81576040517f37710a6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd333064012a05f2006040518463ffffffff1660e01b8152600401610ce5939291906129e5565b602060405180830381600087803b158015610cff57600080fd5b505af1158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190612a31565b905080610d70576040517fbcc8eeb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d7c3360075461170f565b610d886007548461172d565b604051806040016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152506008600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506007543073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2f7377f0470ca5f5d5bcb55c33ff5e20e0a2653933e0615e99f01e81640d0a9260405160405180910390a46001600754610e8a9190612a8d565b600781905550600754915050919050565b6060600060075467ffffffffffffffff811115610ebb57610eba61220f565b5b604051908082528060200260200182016040528015610ef457816020015b610ee1611d67565b815260200190600190039081610ed95790505b50905060005b600754811015610fb957600060086000838152602001908152602001600020905080604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110610f9a57610f99612ae3565b5b6020026020010181905250508080610fb190612b12565b915050610efa565b508091505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110c8816117a1565b611107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fe90612868565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611185836106d4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111d7836106d4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061121957506112188185610fc1565b5b8061125757508373ffffffffffffffffffffffffffffffffffffffff1661123f846104f6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611280826106d4565b73ffffffffffffffffffffffffffffffffffffffff16146112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd90612bcd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133d90612c5f565b60405180910390fd5b61135183838361180d565b61135c600082611112565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ac9190612c7f565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114039190612a8d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114c2838383611812565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d90612cff565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116279190611eee565b60405180910390a3505050565b61163f848484611260565b61164b84848484611817565b61168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612d91565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606116b2826110bf565b60006116bc611690565b905060008151116116dc5760405180602001604052806000815250611707565b806116e6846119ae565b6040516020016116f7929190612956565b6040516020818303038152906040525b915050919050565b611729828260405180602001604052806000815250611b0f565b5050565b611736826117a1565b611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176c90612e23565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061179c929190611d97565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006118388473ffffffffffffffffffffffffffffffffffffffff16611b6a565b156119a1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261186161110a565b8786866040518563ffffffff1660e01b81526004016118839493929190612e98565b602060405180830381600087803b15801561189d57600080fd5b505af19250505080156118ce57506040513d601f19601f820116820180604052508101906118cb9190612ef9565b60015b611951573d80600081146118fe576040519150601f19603f3d011682016040523d82523d6000602084013e611903565b606091505b50600081511415611949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194090612d91565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119a6565b600190505b949350505050565b606060008214156119f6576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b0a565b600082905060005b60008214611a28578080611a1190612b12565b915050600a82611a219190612f55565b91506119fe565b60008167ffffffffffffffff811115611a4457611a4361220f565b5b6040519080825280601f01601f191660200182016040528015611a765781602001600182028036833780820191505090505b5090505b60008514611b0357600182611a8f9190612c7f565b9150600a85611a9e9190612f86565b6030611aaa9190612a8d565b60f81b818381518110611ac057611abf612ae3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611afc9190612f55565b9450611a7a565b8093505050505b919050565b611b198383611b8d565b611b266000848484611817565b611b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5c90612d91565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf490613003565b60405180910390fd5b611c06816117a1565b15611c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3d9061306f565b60405180910390fd5b611c526000838361180d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca29190612a8d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d6360008383611812565b5050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054611da390612634565b90600052602060002090601f016020900481019282611dc55760008555611e0c565b82601f10611dde57805160ff1916838001178555611e0c565b82800160010185558215611e0c579182015b82811115611e0b578251825591602001919060010190611df0565b5b509050611e199190611e1d565b5090565b5b80821115611e36576000816000905550600101611e1e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e8381611e4e565b8114611e8e57600080fd5b50565b600081359050611ea081611e7a565b92915050565b600060208284031215611ebc57611ebb611e44565b5b6000611eca84828501611e91565b91505092915050565b60008115159050919050565b611ee881611ed3565b82525050565b6000602082019050611f036000830184611edf565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f43578082015181840152602081019050611f28565b83811115611f52576000848401525b50505050565b6000601f19601f8301169050919050565b6000611f7482611f09565b611f7e8185611f14565b9350611f8e818560208601611f25565b611f9781611f58565b840191505092915050565b60006020820190508181036000830152611fbc8184611f69565b905092915050565b6000819050919050565b611fd781611fc4565b8114611fe257600080fd5b50565b600081359050611ff481611fce565b92915050565b6000602082840312156120105761200f611e44565b5b600061201e84828501611fe5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061205282612027565b9050919050565b61206281612047565b82525050565b600060208201905061207d6000830184612059565b92915050565b61208c81612047565b811461209757600080fd5b50565b6000813590506120a981612083565b92915050565b600080604083850312156120c6576120c5611e44565b5b60006120d48582860161209a565b92505060206120e585828601611fe5565b9150509250929050565b60008060006060848603121561210857612107611e44565b5b60006121168682870161209a565b93505060206121278682870161209a565b925050604061213886828701611fe5565b9150509250925092565b61214b81611fc4565b82525050565b60006020820190506121666000830184612142565b92915050565b60006020828403121561218257612181611e44565b5b60006121908482850161209a565b91505092915050565b6121a281611ed3565b81146121ad57600080fd5b50565b6000813590506121bf81612199565b92915050565b600080604083850312156121dc576121db611e44565b5b60006121ea8582860161209a565b92505060206121fb858286016121b0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61224782611f58565b810181811067ffffffffffffffff821117156122665761226561220f565b5b80604052505050565b6000612279611e3a565b9050612285828261223e565b919050565b600067ffffffffffffffff8211156122a5576122a461220f565b5b6122ae82611f58565b9050602081019050919050565b82818337600083830152505050565b60006122dd6122d88461228a565b61226f565b9050828152602081018484840111156122f9576122f861220a565b5b6123048482856122bb565b509392505050565b600082601f83011261232157612320612205565b5b81356123318482602086016122ca565b91505092915050565b6000806000806080858703121561235457612353611e44565b5b60006123628782880161209a565b94505060206123738782880161209a565b935050604061238487828801611fe5565b925050606085013567ffffffffffffffff8111156123a5576123a4611e49565b5b6123b18782880161230c565b91505092959194509250565b600067ffffffffffffffff8211156123d8576123d761220f565b5b6123e182611f58565b9050602081019050919050565b60006124016123fc846123bd565b61226f565b90508281526020810184848401111561241d5761241c61220a565b5b6124288482856122bb565b509392505050565b600082601f83011261244557612444612205565b5b81356124558482602086016123ee565b91505092915050565b60006020828403121561247457612473611e44565b5b600082013567ffffffffffffffff81111561249257612491611e49565b5b61249e84828501612430565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6124dc81611fc4565b82525050565b6124eb81612047565b82525050565b60408201600082015161250760008501826124d3565b50602082015161251a60208501826124e2565b50505050565b600061252c83836124f1565b60408301905092915050565b6000602082019050919050565b6000612550826124a7565b61255a81856124b2565b9350612565836124c3565b8060005b8381101561259657815161257d8882612520565b975061258883612538565b925050600181019050612569565b5085935050505092915050565b600060208201905081810360008301526125bd8184612545565b905092915050565b600080604083850312156125dc576125db611e44565b5b60006125ea8582860161209a565b92505060206125fb8582860161209a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061264c57607f821691505b602082108114156126605761265f612605565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126c2602183611f14565b91506126cd82612666565b604082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612754603e83611f14565b915061275f826126f8565b604082019050919050565b6000602082019050818103600083015261278381612747565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006127e6602e83611f14565b91506127f18261278a565b604082019050919050565b60006020820190508181036000830152612815816127d9565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612852601883611f14565b915061285d8261281c565b602082019050919050565b6000602082019050818103600083015261288181612845565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006128e4602983611f14565b91506128ef82612888565b604082019050919050565b60006020820190508181036000830152612913816128d7565b9050919050565b600081905092915050565b600061293082611f09565b61293a818561291a565b935061294a818560208601611f25565b80840191505092915050565b60006129628285612925565b915061296e8284612925565b91508190509392505050565b60008151905061298981611fce565b92915050565b6000602082840312156129a5576129a4611e44565b5b60006129b38482850161297a565b91505092915050565b60006040820190506129d16000830185612059565b6129de6020830184612059565b9392505050565b60006060820190506129fa6000830186612059565b612a076020830185612059565b612a146040830184612142565b949350505050565b600081519050612a2b81612199565b92915050565b600060208284031215612a4757612a46611e44565b5b6000612a5584828501612a1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a9882611fc4565b9150612aa383611fc4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ad857612ad7612a5e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612b1d82611fc4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b5057612b4f612a5e565b5b600182019050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612bb7602583611f14565b9150612bc282612b5b565b604082019050919050565b60006020820190508181036000830152612be681612baa565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612c49602483611f14565b9150612c5482612bed565b604082019050919050565b60006020820190508181036000830152612c7881612c3c565b9050919050565b6000612c8a82611fc4565b9150612c9583611fc4565b925082821015612ca857612ca7612a5e565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612ce9601983611f14565b9150612cf482612cb3565b602082019050919050565b60006020820190508181036000830152612d1881612cdc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612d7b603283611f14565b9150612d8682612d1f565b604082019050919050565b60006020820190508181036000830152612daa81612d6e565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612e0d602e83611f14565b9150612e1882612db1565b604082019050919050565b60006020820190508181036000830152612e3c81612e00565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612e6a82612e43565b612e748185612e4e565b9350612e84818560208601611f25565b612e8d81611f58565b840191505092915050565b6000608082019050612ead6000830187612059565b612eba6020830186612059565b612ec76040830185612142565b8181036060830152612ed98184612e5f565b905095945050505050565b600081519050612ef381611e7a565b92915050565b600060208284031215612f0f57612f0e611e44565b5b6000612f1d84828501612ee4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f6082611fc4565b9150612f6b83611fc4565b925082612f7b57612f7a612f26565b5b828204905092915050565b6000612f9182611fc4565b9150612f9c83611fc4565b925082612fac57612fab612f26565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612fed602083611f14565b9150612ff882612fb7565b602082019050919050565b6000602082019050818103600083015261301c81612fe0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613059601c83611f14565b915061306482613023565b602082019050919050565b600060208201905081810360008301526130888161304c565b905091905056fea2646970667358221220999a5318a7973e3845a0469110d3c5e17f01d7aabb16c4ccc091602ba87f764b64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2056,
        "contract": "contracts/NFT.sol:NFT",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2067,
        "contract": "contracts/NFT.sol:NFT",
        "label": "details",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(NFTDetails)2054_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTDetails)2054_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFT.NFTDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTDetails)2054_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFTDetails)2054_storage": {
        "encoding": "inplace",
        "label": "struct NFT.NFTDetails",
        "members": [
          {
            "astId": 2051,
            "contract": "contracts/NFT.sol:NFT",
            "label": "tokenid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2053,
            "contract": "contracts/NFT.sol:NFT",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}